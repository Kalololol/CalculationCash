@page "/Transakcje"
@inject NavigationManager NavigationManager


<h3>Transakcje</h3>


<h4>Nowa transakcja:</h4>
<div>
    <label for="date">Data transakcji:</label>
    <input id="date" type="date" @bind="@transactionDate" min="2021-01-01" max=@maxDate />
</div>
<div>
    <label for="commission">Prowizja:</label>
    <input id="commission" type="number" step="0.01" @bind="@newTransaction.Provision" />
</div>
<div>
    <label for="fee">Komisja:</label>
    <input id="fee" type="number" step="0.01" @bind="@newTransaction.Commision" />
</div>
<div>
    <label for="swap">Swap:</label>
    <input id="swap" type="number" step="0.01" @bind="@newTransaction.Swap" />
</div>
<div>
    <label for="profit">Profit:</label>
    <input id="profit" type="number" step="0.01" @bind="@newTransaction.Profit" />
</div>

<button @onclick="AddTransaction">Dodaj</button>


@if (transactions.Count > 0)
{
    
    <table class="table">
        <thead>
            <tr>
                <th>Data transakcji</th>
                <th>Prowizja</th>
                <th>Komisja</th>
                <th>Swap</th>
                <th>Profit</th>
                <th>Razem</th>
            </tr>
        </thead>
        
        <tbody>

            @foreach (var t in transactions)
            {
                <tr>
                    <td>@t.TimeTransaction.ToString("yyyy-MM-dd")</td>
                    <td>@t.Provision</td>
                    <td>@t.Commision</td>
                    <td>@t.Swap</td>
                    <td>@t.Profit</td>
                    <td>@t.ResultSum</td>
                    <button @onclick="(e) => RemoveTransaction(t.Id)">Usuń</button>

                </tr>
                }
        </tbody>
        <th>Suma: @TransactionsSum </th>
        
        <button @onclick="ClearForm">Usuń wszystko</button>

    </table>
    <button @onclick="ConvertForm">Przelicz</button>

}
else
{
    <p> Pusty Formularz </p>
}



@code {
    private List<TransactionBlazor> transactions = new List<TransactionBlazor>();
    private TransactionBlazor newTransaction = new TransactionBlazor();
    private decimal TransactionsSum = 0;
    private List<int> counter;
    int count = 0;
    private string maxDate = DateTime.Now.ToString("yyyy-MM-dd");
    private DateTime transactionDate = DateTime.Now;
    int numberTransaction = 0;


    private async Task AddTransaction()
    {
        if (newTransaction.Commision != null)
        {
            newTransaction.TimeTransaction = transactionDate;
            newTransaction.Id = Guid.NewGuid();
            TransactionsSum += newTransaction.Commision + newTransaction.Swap + newTransaction.Profit + newTransaction.Provision;
            transactions.Add(newTransaction);
            newTransaction = new TransactionBlazor();
            count++;

        }
        else
        {
            ShowDialog();
        }
    }
    private async Task ShowDialog()
    {
        //await DialogService.ShowMessageBox("Tytuł", "Treść wiadomości");   

    }
    private void RemoveTransaction(Guid id)
    {
        var trans = transactions.Find(x => x.Id == id);
        TransactionsSum = trans.Commision - trans.Swap - trans.Profit - trans.Provision;

        int num = transactions.IndexOf(trans);
        transactions.RemoveAt(num);
    }

    private void ClearForm()
    {
        transactions.Clear();
        newTransaction = new TransactionBlazor();
    }
    private void ConvertForm()
    {
        //implementacja kodu do konwersji raportu
    }
    //private void SumTransactions()
    //{
    //    foreach(var t in transactions)
    //    {
    //        TransactionsSum += t.Commision + t.Swap + t.Profit + t.Provision;
    //    }
    //}


}